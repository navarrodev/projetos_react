{"version":3,"sources":["App.styles.ts","components/Listitem/styles.ts","components/Listitem/index.tsx","components/AddArea/styles.ts","components/AddArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Area","Header","h1","done","ListItem","item","useState","isChecked","setIsChecked","type","checked","onChange","e","target","name","AddArea","onEnter","inputText","setInputText","className","placeholder","value","onKeyUp","code","App","id","list","setList","taskName","newList","push","length","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAEaA,EAAYC,IAAOC,IAAV,oGAOTC,EAAOF,IAAOC,IAAV,yFAOJE,EAASH,IAAOI,GAAV,2KCTNL,EAAYC,IAAOC,KAAI,gBAAEI,EAAF,EAAEA,KAAF,mSAkBbA,EAAO,eAAiB,UAlBX,iB,OCEvBC,EAAW,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KACxB,EAAkCC,mBAASD,EAAKF,MAAhD,mBAAOI,EAAP,KAAkBC,EAAlB,KAGA,OACE,eAAC,EAAD,CAAaL,KAAMI,EAAnB,UACE,uBAAOE,KAAK,WACVC,QAASH,EACTI,SAAU,SAAAC,GAAC,OAAIJ,EAAaI,EAAEC,OAAOH,YAIvC,gCAAQL,EAAKS,WClBNjB,EAAYC,IAAOC,IAAV,sYCITgB,EAAU,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,QACvB,EAAkCV,mBAAS,IAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KASA,OACE,eAAC,EAAD,WACE,qBAAKC,UAAU,QAAf,eACA,uBACEV,KAAK,OACLW,YAAY,sBACZC,MAAOJ,EACPN,SAAU,SAAAC,GAAC,OAAEM,EAAaN,EAAEC,OAAOQ,QACnCC,QAfc,SAACV,GACL,UAAXA,EAAEW,MAAiC,KAAbN,IACvBD,EAAQC,GACRC,EAAa,YC8BJM,EAlCH,WACV,MAAwBlB,mBAAiB,CACvC,CAACmB,GAAI,EAAGX,KAAM,eAAgBX,MAAM,GACpC,CAACsB,GAAI,EAAGX,KAAM,eAAgBX,MAAM,KAFtC,mBAAOuB,EAAP,KAAaC,EAAb,KAeA,OACE,cAAC,EAAD,UACE,eAAC,EAAD,WACE,cAAC,EAAD,gCAGA,cAAC,EAAD,CAASX,QAhBO,SAACY,GACrB,IAAIC,EAAO,YAAOH,GAClBG,EAAQC,KAAK,CACXL,GAAIC,EAAKK,OAAS,EAClBjB,KAAMc,EACNzB,MAAM,IAERwB,EAAQE,MAUHH,EAAKM,KAAI,SAAC3B,EAAM4B,GAAP,OACR,cAAC,EAAD,CAAsB5B,KAAMA,GAAb4B,YCnBVC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.61187052.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div `\n  background-color: #17181F;\n  color: #797A81;\n  min-height: 100vh\n\n`;\n\nexport const Area = styled.div`\n    margin: auto;\n    max-width: 980px;\n    padding: 10px\n`;\n\n\nexport const Header = styled.h1`\n    margin: 0;\n    padding: 0;\n    color: #FFF;\n    text-align: center;\n    border-bottom: 1px solid #444;\n    padding-bottom: 20px;\n\n\n`;\n","import styled from 'styled-components';\n\ntype ContainerProps = {\n  done: boolean;\n}\n\n\nexport const Container = styled.div(({done}: ContainerProps)=>(\n  `\n  display: flex;\n  background-color: #20212C;\n  padding: 10px;\n  border-radius: 10px;\n  margin-bottom: 10px;\n  aling-items: center;\n \n\n  input {\n    width: 25px;\n    height: 25px;\n    margin-right: 5px;\n  }\n\n  label {\n    color : #CCC;\n    text-decoration: ${done ? 'line-through' : 'initial'};\n  }\n  `\n));\n\n","import {useState} from 'react';\nimport * as C from './styles';\nimport {Item} from '../../types/Item';\n\ntype Props = {\n  item: Item\n}\n\n\nexport const ListItem = ({item}: Props) => {\n  const [isChecked, setIsChecked] = useState(item.done)\n\n\n  return (\n    <C.Container done={isChecked}>\n      <input type=\"checkbox\"\n        checked={isChecked}\n        onChange={e => setIsChecked(e.target.checked)}\n      />\n\n\n      <label>{item.name}</label>\n    </C.Container>\n\n  );\n\n}\n","import styled from \"styled-components\";\n\n\nexport const Container = styled.div`\n    border: 1px solid #555;\n    border-radius: 15px;\n    padding: 10px;\n    margin: 20px 0;\n    display: flex;\n    align-items: center;\n\n    .image {\n        margin-right: 5px;\n    }\n\n    input {\n        border: 0px;\n        background: transparent;\n        outline: 0;\n        color: #FFF;\n        font-size: 18px;\n        flex: 1;\n\n    }\n\n`;\n","import {useState, KeyboardEvent} from 'react';\nimport * as C from './styles';\n\ntype Props = {\n  onEnter: (taskName: string) => void\n}\n\nexport const AddArea = ({onEnter}: Props) => {\n  const [inputText, setInputText] = useState('');\n  \n  const handleKeyUP = (e: KeyboardEvent) => {\n    if(e.code === 'Enter' && inputText !==''){\n      onEnter(inputText);\n      setInputText('');\n    }\n  }\n\n  return (\n    <C.Container>\n      <div className=\"image\">+</div>\n      <input\n        type=\"text\"\n        placeholder=\"Adicione uma tarefa\"\n        value={inputText}\n        onChange={e=>setInputText(e.target.value)}\n        onKeyUp={handleKeyUP}\n      />\n    </C.Container>\n\n  );\n}\n","import {useState} from 'react';\nimport * as C from './App.styles';\nimport {Item} from './types/Item';\nimport {ListItem} from './components/Listitem';\nimport { AddArea } from './components/AddArea';\n\n\n\n\nconst App = () => {\n  const [list, setList] = useState<Item[]>([\n    {id: 1, name: 'alguma coisa', done: false},\n    {id: 2, name: 'alguma coisa', done: true},\n\n  ]);\n  const handleAddTask = (taskName: string) =>{\n    let newList = [...list];\n    newList.push({\n      id: list.length + 1,\n      name: taskName,\n      done: false\n    });\n    setList(newList);\n  }\n  \n  return (\n    <C.Container>\n      <C.Area>\n        <C.Header>Lista de Tarefas </C.Header>\n\n\n        <AddArea onEnter={handleAddTask} />\n        {list.map((item, index) => (\n          <ListItem key={index} item={item} />\n        ))}\n\n\n      </C.Area>\n\n    </C.Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}